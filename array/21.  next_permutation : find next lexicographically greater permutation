/*
Problem Statement: Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange to the lowest possible order (i.e., sorted in ascending order).
Example 1 :
Input format: Arr[] = {1,3,2}
Output: Arr[] = {2,1,3}
Explanation: All permutations of {1,2,3} are {{1,2,3} , {1,3,2}, {2,13} , {2,3,1} , {3,1,2} , {3,2,1}}. So, the next permutation just after {1,3,2} is {2,1,3}.
Example 2:
Input format: Arr[] = {3,2,1}
Output: Arr[] = {1,2,3}
Explanation: As we see all permutations of {1,2,3}, we find {3,2,1} at the last position. So, we have to return the topmost permutation.
*/

void nextPermutation(int* arr, int n) {
    if (n <= 1) return;

    // Step 1: Find the first index from the right such that arr[i] < arr[i + 1]
    int j = -1;
    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] < arr[i + 1]) {
            j = i;
            break;
        }
    }

    // Step 2: If no such index exists, reverse the array (last permutation â†’ first)
    if (j == -1) {
        int left = 0, right = n - 1;
        while (left < right) {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
        return;
    }

    // Step 3: Find the element just greater than arr[j] to its right
    int k = -1;
    for (int i = n - 1; i > j; i--) {
        if (arr[i] > arr[j]) {
            k = i;
            break;
        }
    }

    // Step 4: Swap arr[j] and arr[k]
    int temp = arr[j];
    arr[j] = arr[k];
    arr[k] = temp;

    // Step 5: Reverse the subarray from j+1 to end
    int left = j + 1, right = n - 1;
    while (left < right) {
        int temp = arr[left];
        arr[left] = arr[right];
        arr[right] = temp;
        left++;
        right--;
    }
}
