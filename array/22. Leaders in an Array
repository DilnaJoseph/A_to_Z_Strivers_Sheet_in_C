/*
Problem Statement: Given an array, print all the elements which are leaders. A Leader is an element that is greater than all of the elements 
on its right side in the array.

Example 1:
Input:
 arr = [4, 7, 1, 0]
Output:
 7 1 0
Explanation:
 Rightmost element is always a leader. 7 and 1 are greater than the elements in their right side.

Example 2:
Input:
 arr = [10, 22, 12, 3, 0, 6]
Output:
 22 12 6
Explanation:
 6 is a leader. In addition to that, 12 is greater than all the elements in its right side (3, 0, 6), also 22 is greater than 12, 3, 0, 6.

*/

int* printLeaders(int arr[], int n, int* size) {
    int* ans = (int*)malloc(n * sizeof(int)); // max possible size
    int count = 0;

    int max = arr[n - 1];
    ans[count++] = arr[n - 1]; // Last element is always a leader

    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] > max) {
            ans[count++] = arr[i];
            max = arr[i];
        }
    }

    // Reverse the result to match output order
    for (int i = 0; i < count / 2; i++) {
        int temp = ans[i];
        ans[i] = ans[count - i - 1];
        ans[count - i - 1] = temp;
    }

    *size = count;
    return ans;
}
